# Generated by Django 5.0.14 on 2025-10-18 17:33

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("customers", "0004_transaction"),
        ("tenants", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Reward",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Reward name (e.g., '$5 Off', 'Free Coffee')",
                        max_length=200,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the reward"),
                ),
                (
                    "reward_type",
                    models.CharField(
                        choices=[
                            ("discount", "Discount Voucher"),
                            ("product", "Product/Service"),
                            ("gift", "Free Gift"),
                            ("upgrade", "Service Upgrade"),
                        ],
                        default="discount",
                        max_length=20,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Reward image/thumbnail",
                        null=True,
                        upload_to="rewards/",
                    ),
                ),
                (
                    "points_required",
                    models.IntegerField(
                        help_text="Points needed to redeem this reward",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "discount_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("percentage", "Percentage Off"),
                            ("fixed", "Fixed Amount Off"),
                        ],
                        help_text="Type of discount (only for discount rewards)",
                        max_length=20,
                    ),
                ),
                (
                    "discount_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Discount amount (e.g., 10 for 10% or $10)",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "minimum_purchase",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Minimum purchase amount required to use this reward",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "has_stock_limit",
                    models.BooleanField(
                        default=False, help_text="Enable stock limit for this reward"
                    ),
                ),
                (
                    "total_stock",
                    models.IntegerField(
                        default=0,
                        help_text="Total available stock",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "redeemed_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of times redeemed",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "has_expiration",
                    models.BooleanField(
                        default=False, help_text="Enable expiration date"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Reward expiration date", null=True
                    ),
                ),
                (
                    "limit_per_customer",
                    models.IntegerField(
                        default=0,
                        help_text="Maximum redemptions per customer (0 = unlimited)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "validity_days",
                    models.IntegerField(
                        default=30,
                        help_text="Days until redeemed reward expires (0 = no expiration)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("expired", "Expired"),
                            ("out_of_stock", "Out of Stock"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="Show as featured reward"
                    ),
                ),
                (
                    "terms_conditions",
                    models.TextField(
                        blank=True, help_text="Terms and conditions for this reward"
                    ),
                ),
                (
                    "display_order",
                    models.IntegerField(
                        default=0, help_text="Display order in catalog (lower = first)"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_rewards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rewards",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reward",
                "verbose_name_plural": "Rewards",
                "db_table": "rewards",
                "ordering": ["display_order", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Redemption",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "redemption_code",
                    models.CharField(
                        help_text="Unique redemption code", max_length=20, unique=True
                    ),
                ),
                (
                    "points_spent",
                    models.IntegerField(
                        help_text="Points spent on this redemption",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("used", "Used"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "valid_from",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this redemption becomes valid",
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True, help_text="When this redemption expires", null=True
                    ),
                ),
                (
                    "used_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the reward was used/claimed",
                        null=True,
                    ),
                ),
                (
                    "customer_note",
                    models.TextField(blank=True, help_text="Customer's note/message"),
                ),
                (
                    "staff_note",
                    models.TextField(blank=True, help_text="Internal staff notes"),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True, help_text="Reason for rejection (if applicable)"
                    ),
                ),
                ("redeemed_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="redemptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="redemptions",
                        to="tenants.tenant",
                    ),
                ),
                (
                    "tenant_customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="redemptions",
                        to="customers.tenantcustomer",
                    ),
                ),
                (
                    "transaction",
                    models.ForeignKey(
                        blank=True,
                        help_text="Transaction where this was used",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="redemptions_used",
                        to="customers.transaction",
                    ),
                ),
                (
                    "used_by_staff",
                    models.ForeignKey(
                        blank=True,
                        help_text="Staff member who processed the redemption",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_redemptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reward",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="redemptions",
                        to="rewards.reward",
                    ),
                ),
            ],
            options={
                "verbose_name": "Redemption",
                "verbose_name_plural": "Redemptions",
                "db_table": "redemptions",
                "ordering": ["-redeemed_at"],
            },
        ),
        migrations.CreateModel(
            name="RewardCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "icon",
                    models.CharField(
                        blank=True, help_text="Icon class or emoji", max_length=50
                    ),
                ),
                ("display_order", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "rewards",
                    models.ManyToManyField(
                        blank=True, related_name="categories", to="rewards.reward"
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reward_categories",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reward Category",
                "verbose_name_plural": "Reward Categories",
                "db_table": "reward_categories",
                "ordering": ["display_order", "name"],
            },
        ),
        migrations.AddIndex(
            model_name="reward",
            index=models.Index(
                fields=["tenant", "status"], name="rewards_tenant__d29837_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reward",
            index=models.Index(
                fields=["tenant", "is_featured"], name="rewards_tenant__988fd3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reward",
            index=models.Index(
                fields=["points_required"], name="rewards_points__36ce72_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="redemption",
            index=models.Index(
                fields=["tenant", "customer", "-redeemed_at"],
                name="redemptions_tenant__fa5e39_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="redemption",
            index=models.Index(
                fields=["tenant", "status"], name="redemptions_tenant__055ac6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="redemption",
            index=models.Index(
                fields=["redemption_code"], name="redemptions_redempt_d2c099_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="redemption",
            index=models.Index(
                fields=["status", "valid_until"], name="redemptions_status_93196e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rewardcategory",
            unique_together={("tenant", "name")},
        ),
    ]
