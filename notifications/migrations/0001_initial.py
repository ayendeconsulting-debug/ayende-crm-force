# Generated by Django 5.0 on 2025-10-21 02:16

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0002_initial'),
        ('tenants', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Notification subject/title', max_length=200)),
                ('message', models.TextField(help_text='Main notification message content')),
                ('category', models.CharField(choices=[('promotion', 'Promotion'), ('announcement', 'Announcement'), ('birthday', 'Birthday Greeting'), ('reminder', 'Reminder'), ('alert', 'Alert'), ('update', 'Update'), ('other', 'Other')], default='announcement', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('target_all_customers', models.BooleanField(default=True, help_text='Send to all active customers')),
                ('target_vip_only', models.BooleanField(default=False, help_text='Send only to VIP customers')),
                ('target_min_points', models.IntegerField(blank=True, help_text='Minimum loyalty points required', null=True)),
                ('target_max_points', models.IntegerField(blank=True, help_text='Maximum loyalty points (for targeting new customers)', null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('scheduled', 'Scheduled'), ('sending', 'Sending'), ('sent', 'Sent'), ('failed', 'Failed')], default='draft', max_length=20)),
                ('scheduled_for', models.DateTimeField(blank=True, help_text='Schedule notification for future delivery', null=True)),
                ('sent_at', models.DateTimeField(blank=True, help_text='When notification was actually sent', null=True)),
                ('total_recipients', models.IntegerField(default=0, help_text='Total number of recipients')),
                ('total_delivered', models.IntegerField(default=0, help_text='Successfully delivered count')),
                ('total_read', models.IntegerField(default=0, help_text='Number of recipients who read the notification')),
                ('total_failed', models.IntegerField(default=0, help_text='Failed delivery count')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this notification')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Business staff member who created this notification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_notifications', to=settings.AUTH_USER_MODEL)),
                ('target_specific_customers', models.ManyToManyField(blank=True, help_text='Specific customers to target', related_name='targeted_notifications', to='customers.tenantcustomer')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationRecipient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('delivery_status', models.CharField(choices=[('pending', 'Pending'), ('delivered', 'Delivered'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('delivered_at', models.DateTimeField(blank=True, help_text='When notification was delivered', null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, help_text='When customer read the notification', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='notifications.notification')),
                ('tenant_customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_notifications', to='customers.tenantcustomer')),
            ],
            options={
                'verbose_name': 'Notification Recipient',
                'verbose_name_plural': 'Notification Recipients',
                'db_table': 'notification_recipients',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['tenant', '-created_at'], name='notificatio_tenant__b31a53_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['status'], name='notificatio_status_fce6f5_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['category'], name='notificatio_categor_c83784_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_for'], name='notificatio_schedul_3d00b6_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationrecipient',
            index=models.Index(fields=['tenant_customer', '-created_at'], name='notificatio_tenant__240c19_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationrecipient',
            index=models.Index(fields=['notification', 'is_read'], name='notificatio_notific_e69ff3_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationrecipient',
            index=models.Index(fields=['is_read'], name='notificatio_is_read_3bd5c2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationrecipient',
            unique_together={('notification', 'tenant_customer')},
        ),
    ]
