# Generated by Django 5.0 on 2025-10-24 19:25

import random
import string
from django.db import migrations, models
import tenants.models


def generate_uuid():
    """Generate unique UUID with pattern a-cx-{5 random alphanumeric}"""
    characters = string.ascii_lowercase + string.digits
    random_part = ''.join(random.choices(characters, k=5))
    return f'a-cx-{random_part}'


def generate_unique_uuids_for_existing_tenants(apps, schema_editor):
    """
    Generate unique UUIDs for all existing tenants
    """
    Tenant = apps.get_model('tenants', 'Tenant')
    
    for tenant in Tenant.objects.all():
        # Generate a unique UUID
        while True:
            new_uuid = generate_uuid()
            # Check if this UUID already exists
            if not Tenant.objects.filter(tenant_uuid=new_uuid).exists():
                tenant.tenant_uuid = new_uuid
                tenant.save(update_fields=['tenant_uuid'])
                print(f"Generated UUID {new_uuid} for tenant: {tenant.name}")
                break


def reverse_uuid_generation(apps, schema_editor):
    """
    Reverse operation - set all UUIDs to empty string
    This allows rollback if needed
    """
    Tenant = apps.get_model('tenants', 'Tenant')
    Tenant.objects.all().update(tenant_uuid='')


class Migration(migrations.Migration):

    dependencies = [
        ('tenants', '0001_initial'),
    ]

    operations = [
        # Step 1: Add field without unique constraint (nullable temporarily)
        migrations.AddField(
            model_name='tenant',
            name='tenant_uuid',
            field=models.CharField(
                db_index=True,
                editable=False,
                help_text='Unique tenant identifier (e.g., a-cx-3k9f2)',
                max_length=20,
                null=True,  # Temporarily nullable
                blank=True,
            ),
        ),
        
        # Step 2: Generate unique UUIDs for existing tenants
        migrations.RunPython(
            generate_unique_uuids_for_existing_tenants,
            reverse_uuid_generation
        ),
        
        # Step 3: Now make the field non-nullable and unique
        migrations.AlterField(
            model_name='tenant',
            name='tenant_uuid',
            field=models.CharField(
                db_index=True,
                default=tenants.models.generate_tenant_uuid,
                editable=False,
                help_text='Unique tenant identifier (e.g., a-cx-3k9f2)',
                max_length=20,
                unique=True,
            ),
        ),
    ]
